
 --------------------------------------加载----------------------------------
application.properties是通过 ConfigurationPropertiesBindingPostProcessor加载的
详情见：https://github.com/spring-projects/spring-boot/blob/eb4803832b79e5ed0fa0c0c8da8e36b579ef931e/
spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java
------------------------------------------------------------------------
------------------------------------读取顺序------------------------------------
Application属性文件，按优先级排序，位置高的将覆盖位置低的
1. 当前目录下的一个/config子目录
2. 当前目录
3. 一个classpath下的/config包
4. classpath根路径（root）
这个列表是按优先级排序的（列表中位置高的将覆盖位置低的）
 ------------------------------------------------------------------------
-----------------------------------常用配置-------------------------------------
配置应用端口和其他配置的介绍
#端口配置：
server.port=8090
#时间格式化
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#时区设置
spring.jackson.time-zone=Asia/Chongqing

------------------------------------------------------------------------
-----------------------------------读取方式-------------------------------------
SpringBoot读取application.properties文件，通常有3种方式
1. @Value  例如： 
@Value("${spring.profiles.active}")
private String profileActive;------相当于把properties文件中的spring.profiles.active注入到变量profileActive中

2. @ConfigurationProperties  例如：
@Component
@ConfigurationProperties(locations = "classpath:application.properties",prefix="test")
public class TestProperties {
String url;
String key;
}

其他类中使用时，就可以直接注入该TestProperties 进行访问相关的值
3. 使用Enviroment   例如：
private Enviroment env;
env.getProperty("test.url");
而env方式效率较低


------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

























