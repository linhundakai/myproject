前面介绍过spring的MVC结合不同的view显示不同的数据，如：结合json的view显示json、结合xml的view显示xml文档。那么这些数据除了在WebBrowser中用JavaScript来调用以外，还可以用远程服务器的Java程序、C#程序来调用。也就是说现在的程序不仅在BS中能调用，在CS中同样也能调用，不过你需要借助RestTemplate这个类来完成。RestTemplate有点类似于一个WebService客户端请求的模版，可以调用http请求的WebService，并将结果转换成相应的对象类型。至少你可以这样理解！


-----------------------------------------------服务端代码-------------------------------------------------------
package com.hoo.controller;

 

import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.servlet.ModelAndView;

 

/**

 * function:SpringMVC REST示例

 * @author hoojo

 * @createDate 2011-6-9 上午11:34:08

 * @file RESTController.java

 * @package com.hoo.controller

 * @project SpringRestWS

 * @blog http://blog.csdn.net/IBM_hoojo

 * @email hoojo_@126.com

 * @version 1.0

 */

@RequestMapping("/restful")

@Controller

public class RESTController {

    

    @RequestMapping(value = "/show", method = RequestMethod.GET)

    public ModelAndView show() {

        System.out.println("show");

        ModelAndView model = new ModelAndView("xStreamMarshallingView");

        model.addObject("show method");

        return model; 

    }

    

    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)

    public ModelAndView getUserById(@PathVariable String id) {

        System.out.println("getUserById-" + id);

        ModelAndView model = new ModelAndView("xStreamMarshallingView");

        model.addObject("getUserById method -" + id);

        return model; 

    }

    

    @RequestMapping(value = "/add", method = RequestMethod.POST)

    public ModelAndView addUser(String user) {

        System.out.println("addUser-" + user);

        ModelAndView model = new ModelAndView("xStreamMarshallingView");

        model.addObject("addUser method -" + user);

        return model; 

    }

    

    @RequestMapping(value = "/edit", method = RequestMethod.PUT)

    public ModelAndView editUser(String user) {

        System.out.println("editUser-" + user);

        ModelAndView model = new ModelAndView("xStreamMarshallingView");

        model.addObject("editUser method -" + user);

        return model;

    }

    

    @RequestMapping(value = "/remove/{id}", method = RequestMethod.DELETE)

    public ModelAndView removeUser(@PathVariable String id) {

        System.out.println("removeUser-" + id);

        ModelAndView model = new ModelAndView("xStreamMarshallingView");

        model.addObject("removeUser method -" + id);

        return model;

    }

}
------------------------------------------------------------------------------------------------------
-----------------------------------------------客户端代码-----------------------------------------------------

package com.hoo.client;

 

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Component;

import org.springframework.web.client.RestTemplate;

 

/**

 * function:RestTemplate调用REST资源

 * @author hoojo

 * @createDate 2011-6-9 上午11:56:16

 * @file RESTClient.java

 * @package com.hoo.client

 * @project SpringRestWS

 * @blog http://blog.csdn.net/IBM_hoojo

 * @email hoojo_@126.com

 * @version 1.0

 */

@Component

public class RESTClient {

    

    @Autowired

    private RestTemplate template;

    

    private final static String url = "http://localhost:8080/SpringRestWS/restful/";

    

    public String show() {

        return template.getForObject(url + "show.do", String.class, new String[]{});

    }

    

    public String getUserById(String id) {

        return template.getForObject(url + "get/{id}.do", String.class, id); 

    }

    

    public String addUser(String user) {

        return template.postForObject(url + "add.do?user={user}", null, String.class, user);

    }

    

    public String editUser(String user) {

        template.put(url + "edit.do?user={user}", null, user);

        return user;

    }

    

    public String removeUser(String id) {

        template.delete(url + "/remove/{id}.do", id);

        return id;

    }

}

RestTemplate的getForObject完成get请求、postForObject完成post请求、put对应的完成put请求、delete完成delete请求；还有execute可以执行任何请求的方法，需要你设置RequestMethod来指定当前请求类型。

RestTemplate.getForObject(String url, Class responseType, String... urlVariables)

参数url是http请求的地址，参数Class是请求响应返回后的数据的类型，最后一个参数是请求中需要设置的参数。

template.getForObject(url + "get/{id}.do", String.class, id);

如上面的参数是{id}，返回的是一个string类型，设置的参数是id。最后执行该方法会返回一个String类型的结果




















































