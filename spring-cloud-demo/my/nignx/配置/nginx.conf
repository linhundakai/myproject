
#Nginx用户及组：用户 组。window下不指定
#user  nobody;

#工作进程：数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。
worker_processes  1;

#错误日志：存放路径。
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  D:\\temp\\error.log  info;

#pid（进程标识符）：存放路径。
#pid        logs/nginx.pid;

#指定进程可以打开的最大描述符：数目。
#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit 
#-n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
#现在在Linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，
#总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。
worker_rlimit_nofile 65535;

events {
################################################################################################
#使用epoll的I/O 模型。linux建议epoll，FreeBSD建议采用kqueue，window下不指定。
#补充说明:
#与apache相类，nginx针对不同的操作系统，有不同的事件模型
#A）标准事件模型
#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
#B）高效事件模型
#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS #X系统使用kqueue可能会造成内核崩溃。
#Epoll：使用于Linux内核2.6版本及以后的系统。
#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
#
#	use epoll;
################################################################################################

#每个工作进程的最大连接数量。根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程
#允许的最多连接数，理论上每台nginx服务器的最大连接数为 worker_processes*worker_connections 。
    worker_connections  1024;		
}

##设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
#设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
################################################################################################	
#日志格式设置。
#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；
#$remote_user：用来记录客户端用户名称；
#$time_local： 用来记录访问时间与时区；
#$request： 用来记录请求的url与http协议；
#$status： 用来记录请求状态；成功是200，
#$body_bytes_sent ：记录发送给客户端文件主体内容大小；
#$http_referer：用来记录从那个页面链接访问过来的；
#$http_user_agent：记录客户浏览器的相关信息；
#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器
#的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原
#来客户端的请求的服务器地址。
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
################################################################################################	
#用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；
    #access_log  logs/access.log  main;
################################################################################################	
#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket
#size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成
#为可能。如果hash bucket
#size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是#在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket #size的提示，那么首要的是增大前一个参数的大小.
    server_names_hash_bucket_size 128;
################################################################################################	
#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都
#要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。
    client_header_buffer_size 4k;
################################################################################################	
#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果
#header过大，它会使用large_client_header_buffers来读取。
    large_client_header_buffers 8 128k;
################################################################################################	
#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 
#方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，
#可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。    
	sendfile        on;
#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    #tcp_nopush     on;
################################################################################################	
#后端服务器连接的超时时间_发起握手等候响应超时时间
	proxy_connect_timeout 90; 
#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）
    proxy_read_timeout 180;
#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
    proxy_send_timeout 180;
#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令
#proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小
    proxy_buffer_size 256k;
#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k
    proxy_buffers 4 256k;
#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长	
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size 256k;
################################################################################################
#Nginx 缓存模块或其他使用共享缓存的模块不能在Windows Vista及以上的window上运行
#proxy_temp_path和proxy_cache_path指定的路径必须在同一分区
#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。
#
#    proxy_temp_path /temp/proxy_temp_dir;
#    proxy_cache_path /temp/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;

################################################################################################
#keepalive超时时间。
    keepalive_timeout  65;
################################################################################################	
#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。
#如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。
#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误	
    client_body_buffer_size 512k;
################################################################################################	
#表示使nginx阻止HTTP应答代码为400或者更高的应答。
	proxy_intercept_errors on;
################################################################################################	
##负责压缩数据流
    gzip  on;
	gzip_min_length   1000;  
    gzip_types        text/plain text/css application/x-javascript;
################################################################################################	
     include                    D:\\application\\nginx-1.8.1\\conf\\upstream.conf;
     include                    D:\\application\\nginx-1.8.1\\conf\\http_server.conf; 
}
















